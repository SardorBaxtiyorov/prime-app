name: Build and Deploy Web App to Server

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build JAR file
        run: ./mvnw clean package -DskipTests

      - name: Verify files
        run: |
          ls -l target/ || echo "target/ not found"
          ls -l docker-compose.yml || echo "docker-compose.yml not found"
          ls -l Dockerfile || echo "Dockerfile not found"

      - name: Create target directory on server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            mkdir -p /home/ubuntu/final-xo
            sudo usermod -aG docker $USER
            cd /home/ubuntu/final-xo
            sudo docker-compose down || echo "docker-compose down failed"
            sudo docker rm -f $(sudo docker ps -aq) || echo "Container removal failed"

      - name: Copy files to server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: "target/app.jar,docker-compose.yml,Dockerfile"
          target: /home/ubuntu/final-xo
          port: 22
          timeout: 30s
          command_timeout: 10m
          debug: true
          strip_components: 0
          overwrite: true

      - name: Deploy on server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            cd ~/final-xo
            ls -l /home/ubuntu/final-xo || echo "Files not found in final-xo"
            # Create .env file
            echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" > .env
            echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
            echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
            echo "SPRING_DATASOURCE_URL=jdbc:postgresql://web_db:5432/${{ secrets.POSTGRES_DB }}" >> .env
            echo "SPRING_DATASOURCE_USERNAME=${{ secrets.POSTGRES_USER }}" >> .env
            echo "SPRING_DATASOURCE_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
            echo "AWS_S3_BUCKET=${{ secrets.S3_BUCKET_NAME }}" >> .env
            echo "AWS_S3_REGION=${{ secrets.S3_REGION }}" >> .env
            echo "AWS_S3_ACCESS_KEY=${{ secrets.S3_ACCESS_KEY }}" >> .env
            echo "AWS_S3_SECRET_ACCESS_KEY=${{ secrets.S3_SECRET_ACCESS_KEY }}" >> .env
            sudo apt-get update && sudo apt-get install -y dos2unix
            dos2unix .env
            sudo docker-compose down
            sudo docker-compose up --build -d
            sudo docker ps -a